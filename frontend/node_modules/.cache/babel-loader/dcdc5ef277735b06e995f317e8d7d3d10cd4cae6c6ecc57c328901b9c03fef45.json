{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor to add auth token\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor to handle errors\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\n\n// Auth API\nexport const authAPI = {\n  login: credentials => api.post('/auth/login', credentials),\n  register: userData => api.post('/auth/register', userData),\n  getMe: () => api.get('/auth/me')\n};\n\n// Dispensary API\nexport const dispensaryAPI = {\n  getAll: params => api.get('/dispensary/dispenses', {\n    params\n  }),\n  getById: id => api.get(`/dispensary/dispenses/${id}`),\n  create: data => api.post('/dispensary/dispenses', data),\n  update: (id, data) => api.put(`/dispensary/dispenses/${id}`, data),\n  pay: (id, data) => api.post(`/dispensary/dispenses/${id}/pay`, data)\n};\n\n// Patient API\nexport const patientAPI = {\n  getAll: params => api.get('/patients', {\n    params\n  }),\n  getById: id => api.get(`/patients/${id}`),\n  create: data => api.post('/patients', data),\n  update: (id, data) => api.put(`/patients/${id}`, data),\n  delete: id => api.delete(`/patients/${id}`)\n};\n\n// Doctor API\nexport const doctorAPI = {\n  getAll: params => api.get('/doctors', {\n    params\n  }),\n  getById: id => api.get(`/doctors/${id}`),\n  create: data => api.post('/doctors', data),\n  update: (id, data) => api.put(`/doctors/${id}`, data),\n  delete: id => api.delete(`/doctors/${id}`),\n  getSpecializations: () => api.get('/doctors/specializations/list')\n};\n\n// Appointment API\nexport const appointmentAPI = {\n  getAll: params => api.get('/appointments', {\n    params\n  }),\n  getById: id => api.get(`/appointments/${id}`),\n  create: data => api.post('/appointments', data),\n  update: (id, data) => api.put(`/appointments/${id}`, data),\n  delete: id => api.delete(`/appointments/${id}`),\n  getDoctorAvailability: (doctorId, date) => api.get(`/appointments/doctor/${doctorId}/availability`, {\n    params: {\n      date\n    }\n  })\n};\n\n// Medical Record API\nexport const medicalRecordAPI = {\n  getAll: params => api.get('/medical-records', {\n    params\n  }),\n  getById: id => api.get(`/medical-records/${id}`),\n  getByPatient: (patientId, params) => api.get(`/medical-records/patient/${patientId}`, {\n    params\n  }),\n  create: data => api.post('/medical-records', data),\n  update: (id, data) => api.put(`/medical-records/${id}`, data),\n  delete: id => api.delete(`/medical-records/${id}`),\n  addPrescription: (id, data) => api.post(`/medical-records/${id}/prescription`, data)\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","authAPI","login","credentials","post","register","userData","getMe","get","dispensaryAPI","getAll","params","getById","id","data","update","put","pay","patientAPI","delete","doctorAPI","getSpecializations","appointmentAPI","getDoctorAvailability","doctorId","date","medicalRecordAPI","getByPatient","patientId","addPrescription"],"sources":["C:/Users/Kashif/clinic-management-system/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\n// Create axios instance\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Request interceptor to add auth token\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Response interceptor to handle errors\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    if (error.response?.status === 401) {\r\n      localStorage.removeItem('token');\r\n      localStorage.removeItem('user');\r\n      window.location.href = '/login';\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Auth API\r\nexport const authAPI = {\r\n  login: (credentials) => api.post('/auth/login', credentials),\r\n  register: (userData) => api.post('/auth/register', userData),\r\n  getMe: () => api.get('/auth/me'),\r\n};\r\n\r\n// Dispensary API\r\nexport const dispensaryAPI = {\r\n  getAll: (params) => api.get('/dispensary/dispenses', { params }),\r\n  getById: (id) => api.get(`/dispensary/dispenses/${id}`),\r\n  create: (data) => api.post('/dispensary/dispenses', data),\r\n  update: (id, data) => api.put(`/dispensary/dispenses/${id}`, data),\r\n  pay: (id, data) => api.post(`/dispensary/dispenses/${id}/pay`, data),\r\n};\r\n\r\n// Patient API\r\nexport const patientAPI = {\r\n  getAll: (params) => api.get('/patients', { params }),\r\n  getById: (id) => api.get(`/patients/${id}`),\r\n  create: (data) => api.post('/patients', data),\r\n  update: (id, data) => api.put(`/patients/${id}`, data),\r\n  delete: (id) => api.delete(`/patients/${id}`),\r\n};\r\n\r\n// Doctor API\r\nexport const doctorAPI = {\r\n  getAll: (params) => api.get('/doctors', { params }),\r\n  getById: (id) => api.get(`/doctors/${id}`),\r\n  create: (data) => api.post('/doctors', data),\r\n  update: (id, data) => api.put(`/doctors/${id}`, data),\r\n  delete: (id) => api.delete(`/doctors/${id}`),\r\n  getSpecializations: () => api.get('/doctors/specializations/list'),\r\n};\r\n\r\n// Appointment API\r\nexport const appointmentAPI = {\r\n  getAll: (params) => api.get('/appointments', { params }),\r\n  getById: (id) => api.get(`/appointments/${id}`),\r\n  create: (data) => api.post('/appointments', data),\r\n  update: (id, data) => api.put(`/appointments/${id}`, data),\r\n  delete: (id) => api.delete(`/appointments/${id}`),\r\n  getDoctorAvailability: (doctorId, date) => \r\n    api.get(`/appointments/doctor/${doctorId}/availability`, { params: { date } }),\r\n};\r\n\r\n// Medical Record API\r\nexport const medicalRecordAPI = {\r\n  getAll: (params) => api.get('/medical-records', { params }),\r\n  getById: (id) => api.get(`/medical-records/${id}`),\r\n  getByPatient: (patientId, params) => \r\n    api.get(`/medical-records/patient/${patientId}`, { params }),\r\n  create: (data) => api.post('/medical-records', data),\r\n  update: (id, data) => api.put(`/medical-records/${id}`, data),\r\n  delete: (id) => api.delete(`/medical-records/${id}`),\r\n  addPrescription: (id, data) => api.post(`/medical-records/${id}/prescription`, data),\r\n};\r\n\r\nexport default api;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}